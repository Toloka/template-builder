import { ComponentConfig } from '../../coreComponentApi';
import { CtxBag } from '../ctxBag';
import { ValidationError } from '../form';

// this file exists to avoid circular dependencies inside this folder
export type MakeNode = (config: TbNode['config'], ctx: CtxBag) => TbNode;

export type TbNode = {
    // provided by parent (must be resolved)
    readonly config: ComponentConfig;
    readonly bag: CtxBag;

    // state key (generated by node when it is constructed)
    readonly key: string;

    // used by components
    readonly props: object;
    children: { [key: string]: TbNode }; // managed by manageChildren as making children has side effects

    readonly validationError: ValidationError | undefined; // computed
    readonly errors: ValidationError[]; // computed

    // used by parent
    destroyed: boolean;
    destroy: () => void;
};
